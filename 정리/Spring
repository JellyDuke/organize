번외

파일 jar 실행법: shift + 우클릭 Widow PowerShell 
java -jar 파일명.jar

Spring

1. window -> preferences -> enco 검색 -> utf8
2. 좌상단 아래 서버 -> tomcat 9 -> finish


File -> new -> Spring Leqacy project 
> (Templates)spring MVC project -> next
> 이름 ex) com.springProject01.controller
> 메인. 프로젝트 명. ~~로 프로젝트를 만들거다
> projcet 파일 select > Run as > Run On server
> package 파일명 com.만든 프로젝트명, ~~이름으로 만들거다.



Multiple Contexts have a path of "/controller"
프로젝트 두개 이상일때 서버 처음 실행할때 나오는 오류 메시지
path 경로가 중복, 동일해서 오류가 남. 
해결법. > tomcat서버 더블클릭 > Modules > 변경할 파일 > edit or remove/rename



파라미터(parameter) 또는 매개변수(媒介變數)는 
수학과 통계학에서 어떠한 시스템이나 함수의 특정한 성질을 나타내는 변수

-@ 어노테이션 코드 사이에 주석처럼 쓰여서 특별한 의미, 기능을 수행하도록 하는 기술이다.
@Controller 
컨트롤러, 사용자 처리 수행(중간 제어자, 역활분담)
ex) @Controller
    public class MemberController
이걸 붙여야 애가 컨트롤러 입니다. 하는 것.
import해야함.

@RequestMapping(value = "/");
value = 요청받을 url, method = 어떤 요청(GET, POST, PUT, DELETE 등)

@RequestParam(value="teststr") String tstr, @RequestParam(value="testval", defaultValue ="TEST") String testval
페이지에서 받은 파라미터 teststr을 String tstr로 하겠다. 페이지에서 보내주는 파라미터 testval(이)가 없으면 기본값을 TEST를 주겠다. 이 변수를 testval로 하겠다.

@Data: field 필드 자동 생성. getter.. setter.. (lombok 라이브러리 필요.)

@Service: 서비스 기능을 할 어노테이션. servlet에서는 이제 애가 서비스입니다. 하고 인식을 한다.

@Autowired: Spring에서 스캔이 되어있는 객체를 자동으로 만들어서 연결 시켜준다.
ex) @Autowired
	MemberService msvc;

@Insert("INSERT INTO ~ VALUES(#{~}, #{~}..)"): sql insert하기 위한 어노테이션 mybatis를 이용하는 것.

@ResponseBody: 응답을 데이터로 해주겠다.

@Param:파라미터를 ~~로 해주겠다.



- servlet-context.xml : 웹과 서버관의 외부 설정이 필요 할때 사용하는 설정 파일.
<context:component-scan base-package="com.springProject01.controller" />
컨트롤러 사용 할 수 있는 이유. 지정된 패키지를 스캔. 스캔이 된 파일에는 S가 붙어 있다. 관리는 beans
com.springProject01.* 이렇게 하면 com.springProject01에 있는 파일들을 모두 스캔 하겠다.
스캔을 해야 컨트롤러의 기능을 수행한다.



- root-context.xml : 서버 안에 들어 왔을때. 내부에서 쓰일 설정 파일.
DB관련 설정. CONNECTION
Namespaces 들어가서 사용할 라이브러리들 체크. ex) jdbc, mybatis -> database

-classpath: src/main/resource 의 경로를 의미한다.



- porm.xml: 드라이버나, 라이브러리에 관련된 설정.
<properties>: xml에서 사용하는 변수명. (*properties: 고유 특성, 속성)
  <java-version>.. 등등
    <version>${org.springframework-version}</version> 변수 가져와서 쓰기
<dependencies> > <dependency> : 라이브러리 관련 설정. (*dependency: 의존성)
  <dependency>로 필요한 라이브러리를 태그를 한다.
maven-compiler-plugin: 라이브러리를 빌드. 사용하기위한 도구.
  maven-source: 쓰고있는 버전(실제 프로젝트 자바 버전)
  maven-target: 컴파일 할 버전

- porm.xml 라이브러리 설정
maven 사이트에서 설정할 항목을 검색 후 버전 바꾸기. 혹은 추가
경고 사항 - spring depedency와 버전이 같아야 한다.
<dependency>
	추가할 라이브러리
</dependency>



return "main"; -> main.jsp /WEB-INF/views/main.jsp 
경로는 servlet - context.xml에서 수정 가능.

return "board/main"; /WEB-INF/views/board/main.jsp
어디에있는 파일이라는 경로 붙이는 법.

public String mainPage(Model model)
Model 객체 선언. 데이터 주고 받는 것.

model.addAttribute("testVal",1111);
//reqest.setAttribute(); 

public ModelAndView mainPage(Model model)
ModelAndView 객체는 데이터와 페이지를 가지고 한번에 넘겨주는 객체이다.




1. 데이터 - SERVICE
mav.addObject("이름", 데이터); //ArrayList<Board> bList = svc.getBoardList();
데이터를 담기.

2.포워딩 - 페이지 지정
mav.setViewName("페이지 이름"); /WEB-INF/views/main.jsp

mav.setViewName("board/boardWriteForm");
/WEB-INF/views/board/board/WriteForm.jsp 포워딩 해줄 경로를 보여주기.

mav.setViewName("redirect:/"); // 요청 redirect: 다시 지시하다.




interface
-> mybatis로 쉽게 database를 작성하기 위해 넣은 라이브러리. 
-> class대신에 interface로 만듦.




<Mybatis 라이브러리 관련 내용>

-mybatis root-context.xml 설정
<mybatis-spring:scan base-package="사용하는 패키지 이름."/>
mybatis 스캔.

-DataBase.
쿼리문 쓰기위한 방법
@INSERT.. @SELECT ...이외에

src/main/resources/mybatis-config.xml 
mybatis 홈페이지 -> start -> 설정문 태그들 복사.. 붙여넣어서 사용.
사용하는 database sql의 파일의 xml 파일 따로 만듦.

ex)파일 생성
<!DOCTYPE configuration
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
 	<mappers>
 		<mapper resource="mapper/MemberMapper.xml"/>
 	</mappers>
</configuration>
boardMapper.xml -> 홈페이지 start의 mapper 내용 복사.. 입맛에 맞게 설정..

ex) 경로대로 파일생성 이후..
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.spring_memberBoard.dao.MemberDao;">
 	<select id = "selectMemberInfo_mapper" parameterType="String" resultType="com.spring_memberBoard.dto..Member">
 		SELECT * FROM MEMBERS WHERE MID = #{inputId}
 	</select>
</mapper>

쿼리문을 작성할때 매개변수가 두개 이상일때
@Select ("SELECT * FROM MEMBERS WHERE MID = #{mid} AND MPW = #{inputPw}")
	Member selectMemberLoginLogin(@Param("inputId") String inputId, @Param("inputPw") String inputPw);
이런식으로 작성 해야한다.
어노테이션으로 @Parm을 붙여 줘야하고. 파라미터명과 SQL문이 같아야 한다.






----------------------------------------------------------------------------------------------------------------------------------------------

              -WebSocket-

	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		//접속을 하는 경우에 실행
	}

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		//접속중인 클라이언트에서 데이터를 전송하면 실행
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		//접속을 해제하는 경우에 실행
	}


